name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Inject environment variables
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "build/libs/*.jar"
          target: ${{ secrets.EC2_TARGET_PATH }}

      - name: SSH into EC2 and restart app
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # EC2 대상 경로에서 최신 JAR 파일 찾기
            LATEST_JAR=$(ls -t ${{ secrets.EC2_TARGET_PATH }}/*.jar | head -n1)
            echo "Latest JAR found: $LATEST_JAR"

            # 애플리케이션 재시작 스크립트를 임시 파일로 생성
            # 'here document' 문법을 사용하여 스크립트 내용을 파일에 직접 작성
            # 'EOF'를 작은따옴표로 감싸면 내부 변수가 확장되지 않고 리터럴로 처리됩니다.
            # 하지만 여기서는 GitHub Actions 시크릿 변수가 확장되어야 하므로,
            # 'EOF'를 작은따옴표 없이 사용하고, 내부의 쉘 변수들은
            # `\$`와 같이 이스케이프 처리하여 `at` 명령이 실행될 때 확장되도록 합니다.
            # 또는, 가장 확실한 방법은 GitHub Actions 변수를 외부에서 직접 주입하는 것입니다.
            # 여기서는 `env` 명령을 사용하므로 내부 스크립트에서 변수 확장은 필요 없습니다.

            cat <<EOF > /tmp/restart_app.sh
            #!/bin/bash
            # 기존 Java 프로세스 종료
            if pgrep -f "${{ secrets.JAR_NAME }}"; then
              echo "Killing existing process for ${{ secrets.JAR_NAME }}"
              pkill -f "${{ secrets.JAR_NAME }}"
              sleep 5 # 프로세스가 완전히 종료될 시간을 줍니다.
            else
              echo "No existing process for ${{ secrets.JAR_NAME }} found."
            fi

            # 새로운 Java 애플리케이션을 백그라운드에서 시작
            # 'env' 명령을 사용하여 Spring Boot가 인식하는 환경 변수를 직접 설정합니다.
            # 이 방식은 'setsid'로 새로운 세션이 생성되더라도 환경 변수가 정확히 전달됩니다.
            echo "Starting application with JAR: $LATEST_JAR"
            nohup setsid env \
              SPRING_DATASOURCE_URL="${{ secrets.DB_URL }}" \
              SPRING_DATASOURCE_USERNAME="${{ secrets.DB_USERNAME }}" \
              SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              java -jar "$LATEST_JAR" \
              > ${{ secrets.EC2_TARGET_PATH }}/app.log 2>&1 < /dev/null &

            echo "Application restart script completed."
            EOF

            chmod +x /tmp/restart_app.sh

            echo "Scheduling application restart via 'at' command."
            # 수정됨: 'at -f' 옵션을 사용하여 스크립트 파일을 실행하도록 지시
            at -f /tmp/restart_app.sh now

            echo "Application restart scheduled. GitHub Actions will now exit."
            exit 0 # SSH 액션이 성공적으로 종료되도록 명시적으로 exit 0