name: Deploy to EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 이 단계는 이제 필수는 아니지만, 다른 용도로 필요할 수 있으므로 유지합니다.
      - name: Inject environment variables
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "HOLIDAY_API_KEY=${{ secrets.HOLIDAY_API_KEY }}" >> $GITHUB_ENV

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "build/libs/*.jar"
          target: ${{ secrets.EC2_TARGET_PATH }}

      - name: Create Firebase Admin SDK file on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo '${{ secrets.FIREBASE_ADMIN_SDK }}' > ${{ secrets.EC2_TARGET_PATH }}/config/hal-il-project-firebase-adminsdk-fbsvc-d93ce33edb.json

      - name: SSH into EC2 and restart app
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # EC2 대상 경로에서 최신 JAR 파일 찾기
            # secrets.EC2_TARGET_PATH가 JAR 파일의 상위 디렉토리(예: /home/ubuntu/test)라고 가정하고,
            # JAR 파일은 그 안에 있는 'build/libs' 디렉토리에 복사됩니다.
            LATEST_JAR=$(ls -t ${{ secrets.EC2_TARGET_PATH }}/build/libs/*.jar | head -n1)
            echo "Latest JAR found: $LATEST_JAR"

            # 애플리케이션 재시작 스크립트를 임시 파일로 생성
            # 'here document' 문법을 사용하여 스크립트 내용을 파일에 직접 작성합니다.
            # 'EOF_SCRIPT'를 따옴표 없이 사용하여 GitHub Actions 시크릿과 쉘 변수들이
            # 이 시점에서 (GitHub Actions Runner에서) 확장되도록 합니다.
            cat <<EOF_SCRIPT > /tmp/restart_app.sh
            #!/bin/bash
            # 기존 Java 프로세스 종료
            # ${{ secrets.JAR_NAME }}은 GitHub Actions Runner에서 실제 값으로 확장됩니다.
            if pgrep -f "${{ secrets.JAR_NAME }}"; then
              echo "Killing existing process for ${{ secrets.JAR_NAME }}"
              pkill -f "${{ secrets.JAR_NAME }}"
              sleep 5
            else
              echo "No existing process for ${{ secrets.JAR_NAME }} found."
            fi

            # 새로운 Java 애플리케이션을 백그라운드에서 시작
            # ${{ secrets.DB_URL }} 등은 GitHub Actions Runner에서 실제 값으로 확장됩니다.
            # \$LATEST_JAR는 /tmp/restart_app.sh 스크립트가 실행될 때 확장되도록 이스케이프 처리합니다.
            echo "Starting application with JAR: $LATEST_JAR"
            nohup setsid java -jar "$LATEST_JAR" \
              --spring.datasource.url="${{ secrets.DB_URL }}" \
              --spring.datasource.username="${{ secrets.DB_USERNAME }}" \
              --spring.datasource.password="${{ secrets.DB_PASSWORD }}" \
              --HOLIDAY_API_KEY='${{ secrets.HOLIDAY_API_KEY }}' \
              > ${{ secrets.EC2_TARGET_PATH }}/build/libs/app.log 2>&1 < /dev/null &
            
            echo "Application restart script completed."
            EOF_SCRIPT

            chmod +x /tmp/restart_app.sh
            
            echo "Application restart scheduled. GitHub Actions will now exit."
            exit 0 # SSH 액션이 성공적으로 종료되도록 명시적으로 exit 0