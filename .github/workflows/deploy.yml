name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 이 단계는 이제 필수는 아니지만, 다른 용도로 필요할 수 있으므로 유지합니다.
      - name: Inject environment variables
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "build/libs/*.jar"
          target: ${{ secrets.EC2_TARGET_PATH }}

      - name: SSH into EC2 and restart app
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # EC2 대상 경로에서 최신 JAR 파일 찾기
            LATEST_JAR=$(ls -t ${{ secrets.EC2_TARGET_PATH }}/*.jar | head -n1)
            echo "Latest JAR found: $LATEST_JAR"

            # 애플리케이션 재시작 스크립트를 임시 파일로 생성
            # 'here document' 문법을 사용하여 스크립트 내용을 파일에 직접 작성
            # 'EOF_INNER_SCRIPT'를 작은따옴표로 감싸서 내부 변수가 확장되지 않고 리터럴로 처리되도록 합니다.
            # 이렇게 하면 스크립트 내부의 쉘 문법이 손상되지 않습니다.
            cat <<'EOF_INNER_SCRIPT' > /tmp/restart_app.sh
            #!/bin/bash
            # 기존 Java 프로세스 종료
            if pgrep -f "$JAR_NAME"; then
              echo "Killing existing process for $JAR_NAME"
              pkill -f "$JAR_NAME"
              sleep 5
            else
              echo "No existing process for $JAR_NAME found."
            fi

            # 새로운 Java 애플리케이션을 백그라운드에서 시작
            # 'env' 명령을 사용하여 Spring Boot가 인식하는 환경 변수를 직접 설정합니다.
            # 이 변수들은 'at' 명령의 표준 입력을 통해 전달됩니다.
            echo "Starting application with JAR: $LATEST_JAR_PATH"
            nohup setsid env \
              SPRING_DATASOURCE_URL="$SPRING_DATASOURCE_URL" \
              SPRING_DATASOURCE_USERNAME="$SPRING_DATASOURCE_USERNAME" \
              SPRING_DATASOURCE_PASSWORD="$SPRING_DATASOURCE_PASSWORD" \
              java -jar "$LATEST_JAR_PATH" \
              > "$APP_LOG_PATH" 2>&1 < /dev/null &

            echo "Application restart script completed."
            EOF_INNER_SCRIPT

            chmod +x /tmp/restart_app.sh

            echo "Scheduling application restart via 'at' command."
            # 'at -f' 옵션을 사용하여 스크립트 파일을 실행하도록 지시
            # 필요한 환경 변수들을 'at' 명령에 직접 전달합니다.
            # 이렇게 하면 /tmp/restart_app.sh 내부에서 이 변수들을 사용할 수 있습니다.
            at -f /tmp/restart_app.sh now <<EOF_AT_VARS
            JAR_NAME="${{ secrets.JAR_NAME }}"
            LATEST_JAR_PATH="$LATEST_JAR"
            APP_LOG_PATH="${{ secrets.EC2_TARGET_PATH }}/app.log"
            SPRING_DATASOURCE_URL="${{ secrets.DB_URL }}"
            SPRING_DATASOURCE_USERNAME="${{ secrets.DB_USERNAME }}"
            SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}"
            EOF_AT_VARS
  
            echo "Application restart scheduled. GitHub Actions will now exit."
            exit 0 # SSH 액션이 성공적으로 종료되도록 명시적으로 exit 0
